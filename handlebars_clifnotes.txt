Layouts

A layout is simply a Handlebars template with a {{{body}}} placeholder. Usually it will be an HTML page wrapper into which views will be rendered.

Helpers

Helper functions, or "helpers" are functions that can be registered with Handlebars and can be called within a template. Helpers can be used for transforming output, iterating over data, etc. To keep with the spirit of logic-less templates, helpers are the place where logic should be defined.

Metadata

Handlebars has a data channel feature that propagates data through all scopes, including helpers and partials. Values in the data channel can be accessed via the {{@variable}} syntax. Express Handlebars provides metadata about a template it renders on a {{@exphbs}} object allowing access to things like the view name passed to res.render() via {{@exphbs.view}}.

The following is the list of metadata that's accessible on the {{@exphbs}} data object:

    cache: Boolean whether or not the template is cached.
    view: String name of the view passed to res.render().
    layout: String name of the layout view.
    data: Original data object passed when rendering the template.
    helpers: Collection of helpers used when rendering the template.
    partials: Collection of partials used when rendering the template.

API API

API
Configuration and Defaults

There are two main ways to use this package: via its engine factory function, or creating ExpressHandlebars instances; both use the same configuration properties and defaults.

var exphbs = require('express-handlebars');

// Using the engine factory:
exphbs({ /* config */ });

// Create an instance:
exphbs.create({ /* config */ });

The following is the list of configuration properties and their default values (if any):
handlebars=require('handlebars')

extname=".handlebars"

The following example sets up an Express app to use .hbs as the file extension for views:

var express = require('express');
var exphbs  = require('express-handlebars');

var app = express();

app.engine('.hbs', exphbs({extname: '.hbs'}));
app.set('view engine', '.hbs');

layoutsDir

Default layouts directory is relative to express settings.view + layouts/ The string path to the directory where the layout templates reside.

partialsDir

Default partials directory is relative to express settings.view + partials/ The string path to the directory where the partials templates reside or object with the following properties:

    dir: The string path to the directory where the partials templates reside.
    namespace: Optional string namespace to prefix the partial names.
    templates: Optional collection (or promise of a collection) of templates in the form: {filename: template}.

The namespacing feature is useful if multiple partials dirs are used and their file paths might clash.
defaultLayout

The string name or path of a template in the layoutsDir to use as the default layout. This is overridden by a layout specified in the app or response locals. Note: A falsy value will render without a layout; e.g., res.render('home', {layout: false});.
helpers

An object which holds the helper functions used when rendering templates with this ExpressHandlebars instance. When rendering a template, a collection of helpers will be generated by merging: handlebars.helpers (global), helpers (instance), and options.helpers (render-level). This allows Handlebars' registerHelper() function to operate as expected, will providing two extra levels over helper overrides.
compilerOptions

An object which holds options that will be passed along to the Handlebars compiler functions: Handlebars.compile() and Handlebars.precompile().

METHODS---

getPartials([options])

Retrieves the partials in the partialsDir and returns a Promise for an object mapping the partials in the form {name: partial}.

By default each partial will be a compiled Handlebars template function. Use options.precompiled to receive the partials as precompiled templates — this is useful for sharing templates with client code.

Parameters:

    [options]: Optional object containing any of the following properties:

        [cache]: Whether cached templates can be used if they have already been requested. This is recommended for production to avoid unnecessary file I/O.

        [precompiled=false]: Whether precompiled templates should be provided, instead of compiled Handlebars template functions.

The name of each partial corresponds to its location in partialsDir. For example, consider the following directory structure:

views
└── partials
    ├── foo
    │   └── bar.handlebars
    └── title.handlebars

2 directories, 2 files

getPartials() would produce the following result:

var hbs = require('express-handlebars').create();

hbs.getPartials().then(function (partials) {
    console.log(partials);
    // => { 'foo/bar': [Function],
    // =>    title: [Function] }
});